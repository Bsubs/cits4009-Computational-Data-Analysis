rename(".pred_0" = `0`, ".pred_1" = `1`)
rpart.plot(dt_forward$finalModel)
performance_dt_forward <- cal_scores(train_forward_sel, train_class_dt, test_forward_sel, test_class_dt)
print(performance_dt_forward$train)
print(performance_dt_forward$calibration)
p1 <- plot_precision_recall_vs_threshold(train_pred_dt, train_forward_sel, "Precision and Recall vs. Threshold, Train Set")
p2 <- plot_precision_recall_vs_threshold(test_pred_dt, test_forward_sel, "Precision and Recall vs. Threshold, Cal Set")
grid.arrange(p1, p2, ncol=2)
p1 <- plot_roc(train_pred_dt, train_forward_sel)
p2 <- plot_roc(test_pred_dt, test_forward_sel)
grid.arrange(p1, p2, ncol=2)
p1 <- plot_con_matrix(train_class_dt, train_forward_sel)
p2 <- plot_con_matrix(test_class_dt, test_forward_sel)
grid.arrange(p1, p2, ncol=2)
dt_pca <- train_dt(train_pca)
print(dt_pca)
train_class_dt <- as_tibble(predict(dt_pca, newdata = train_pca, type = "raw")) %>%
rename(".pred_class" = value)
test_class_dt <- as_tibble(predict(dt_pca, newdata = test_pca, type = "raw")) %>%
rename(".pred_class" = value)
train_pred_dt <- as_tibble(predict(dt_pca, newdata = train_pca, type = "prob")) %>%
rename(".pred_0" = `0`, ".pred_1" = `1`)
test_pred_dt <- as_tibble(predict(dt_pca, newdata = test_pca, type = "prob")) %>%
rename(".pred_0" = `0`, ".pred_1" = `1`)
rpart.plot(dt_pca$finalModel)
performance_dt_forward <- cal_scores(train_pca, train_class_dt, test_pca, test_class_dt)
print(performance_dt_forward$train)
print(performance_dt_forward$calibration)
p1 <- plot_precision_recall_vs_threshold(train_pred_dt, train_pca, "Precision and Recall vs. Threshold, Train Set")
p2 <- plot_precision_recall_vs_threshold(test_pred_dt , test_pca, "Precision and Recall vs. Threshold, Cal Set")
grid.arrange(p1, p2, ncol=2)
p1 <- plot_roc(train_pred_dt, train_pca)
p2 <- plot_roc(test_pred_dt, test_pca)
grid.arrange(p1, p2, ncol=2)
p1 <- plot_con_matrix(train_class_dt, train_pca)
p2 <- plot_con_matrix(test_class_dt, test_pca)
grid.arrange(p1, p2, ncol=2)
# sketch
colnames(youtube_cleaned) <- sub("\\.log$", "", colnames(youtube_cleaned))
youtube_clustering <- subset(youtube_cleaned, select=-c(average_yearly_earnings.binary))
youtube_clustering <- transform_cols(youtube_clustering, colnames(youtube_clustering), "norm")
# sketch
youtube_clustering <- youtube_clustering[, grep("\\.norm$", colnames(youtube_clustering))]
colnames(youtube_clustering) <- sub("\\.norm$", "", colnames(youtube_clustering))
d <- dist(youtube_clustering, method="manhattan")
pfit <- hclust(d, method="ward.D2")
plot(pfit, main="Cluster Dendrogram for Youtube Channels", labels=names$Youtuber)
rect.hclust(pfit, k=3)
plot_instances <- function(df, x_col, group_vec) {
# Check if x_col exists in df
if (!x_col %in% colnames(df)) {
stop("The specified x_col does not exist in the dataframe")
}
df$Group <- group_vec
agg_data <- df %>%
group_by(!!sym(x_col), Group) %>%
summarise(Count = n()) %>%
ungroup()
p <- ggplot(agg_data, aes_string(x = x_col, y = "Count", fill = "as.factor(Group)")) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = paste0("Number of Instances by ", x_col, " and Group"),
y = "Number of Instances",
x = x_col,
fill = "Group") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
return(p)
}
groups <- cutree(pfit, k=3)
plot_instances(names, "Country", groups)
plot_instances <- function(df, x_col, group_vec) {
# Check if x_col exists in df
if (!x_col %in% colnames(df)) {
stop("The specified x_col does not exist in the dataframe")
}
df$Group <- group_vec
agg_data <- df %>%
group_by(!!sym(x_col), Group) %>%
summarise(Count = n()) %>%
ungroup()
p <- ggplot(agg_data, aes_string(x = x_col, y = "Count", fill = "as.factor(Group)")) +
geom_bar(stat = "identity", position = "stack") +
labs(title = paste0("Number of Instances by ", x_col, " and Group"),
y = "Number of Instances",
x = x_col,
fill = "Group") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
return(p)
}
groups <- cutree(pfit, k=3)
plot_instances(names, "Country", groups)
plot_instances <- function(df, x_col, group_vec) {
# Check if x_col exists in df
if (!x_col %in% colnames(df)) {
stop("The specified x_col does not exist in the dataframe")
}
df$Group <- group_vec
agg_data <- df %>%
group_by(!!sym(x_col), Group) %>%
summarise(Count = n()) %>%
ungroup()
p <- ggplot(agg_data, aes_string(x = x_col, y = "Count", fill = "as.factor(Group)")) +
geom_bar(stat = "identity", position = "fill") +
labs(title = paste0("Number of Instances by ", x_col, " and Group"),
y = "Number of Instances",
x = x_col,
fill = "Group") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
return(p)
}
groups <- cutree(pfit, k=3)
plot_instances(names, "Country", groups)
plot_instances <- function(df, x_col, group_vec) {
# Check if x_col exists in df
if (!x_col %in% colnames(df)) {
stop("The specified x_col does not exist in the dataframe")
}
df$Group <- group_vec
agg_data <- df %>%
group_by(!!sym(x_col), Group) %>%
summarise(Count = n()) %>%
ungroup()
p <- ggplot(agg_data, aes_string(x = x_col, y = "Count", fill = "as.factor(Group)")) +
geom_bar(stat = "identity", position = "stack") +
labs(title = paste0("Number of Instances by ", x_col, " and Group"),
y = "Number of Instances",
x = x_col,
fill = "Group") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
return(p)
}
groups <- cutree(pfit, k=3)
plot_instances(names, "Country", groups)
plot_instances <- function(df, x_col, group_vec) {
# Check if x_col exists in df
if (!x_col %in% colnames(df)) {
stop("The specified x_col does not exist in the dataframe")
}
# Add the group_vec to the dataframe
df$Group <- group_vec
# Aggregate data
library(dplyr)
agg_data <- df %>%
group_by(!!sym(x_col), Group) %>%
summarise(Count = n()) %>%
ungroup() %>%
arrange(-Count)  # Sorting in descending order
# Plotting
p <- ggplot(agg_data, aes_string(y = x_col, x = "Count", fill = "as.factor(Group)")) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = paste0("Number of Instances by ", x_col, " and Group"),
x = "Number of Instances",
y = x_col,
fill = "Group") +
theme_minimal() +
theme(axis.text.y = element_text(hjust = 1))
return(p)
}
groups <- cutree(pfit, k=3)
plot_instances(names, "Country", groups)
plot_instances <- function(df, x_col, group_vec) {
# Check if x_col exists in df
if (!x_col %in% colnames(df)) {
stop("The specified x_col does not exist in the dataframe")
}
# Check if lengths match
if (length(group_vec) != nrow(df)) {
stop("Length of group_vec does not match number of rows in dataframe")
}
# Add the group_vec to the dataframe
df$Group <- group_vec
# Aggregate data
library(dplyr)
agg_data <- df %>%
group_by(!!sym(x_col), Group) %>%
summarise(Count = n()) %>%
ungroup()
# Order the levels of x_col based on Count
agg_data <- agg_data %>%
arrange(Count) %>%
mutate(!!sym(x_col) := factor(!!sym(x_col), levels = unique(!!sym(x_col))))
# Plotting
p <- ggplot(agg_data, aes_string(y = x_col, x = "Count", fill = "as.factor(Group)")) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = paste0("Number of Instances by ", x_col, " and Group"),
x = "Number of Instances",
y = x_col,
fill = "Group") +
theme_minimal() +
theme(axis.text.y = element_text(hjust = 1))
return(p)
}
groups <- cutree(pfit, k=3)
plot_instances(names, "Country", groups)
plot_instances <- function(df, x_col, group_vec) {
# Check if x_col exists in df
if (!x_col %in% colnames(df)) {
stop("The specified x_col does not exist in the dataframe")
}
# Check if lengths match
if (length(group_vec) != nrow(df)) {
stop("Length of group_vec does not match number of rows in dataframe")
}
# Add the group_vec to the dataframe
df$Group <- group_vec
# Aggregate data
library(dplyr)
agg_data <- df %>%
group_by(!!sym(x_col), Group) %>%
summarise(Count = n()) %>%
ungroup()
# Order the levels of x_col based on Count
agg_data <- agg_data %>%
arrange(Count) %>%
mutate(!!sym(x_col) := factor(!!sym(x_col), levels = unique(!!sym(x_col))))
# Plotting
p <- ggplot(agg_data, aes_string(y = x_col, x = "Count", fill = "as.factor(Group)")) +
geom_bar(stat = "identity", position = "stack") +
labs(title = paste0("Number of Instances by ", x_col, " and Group"),
x = "Number of Instances",
y = x_col,
fill = "Group") +
theme_minimal() +
theme(axis.text.y = element_text(hjust = 1))
return(p)
}
groups <- cutree(pfit, k=3)
plot_instances(names, "Country", groups)
plot_instances(names, "channel_type", groups)
princ <- prcomp(youtube_clustering)
nComp <- 2
project2D <- as.data.frame(predict(princ, newdata=scaled_df)[,1:nComp])
hclust.project2D <- cbind(project2D, cluster=as.factor(groups), country=df$Country)
head(hclust.project2D)
princ <- prcomp(youtube_clustering)
nComp <- 2
project2D <- as.data.frame(predict(princ, newdata=youtube_clustering)[,1:nComp])
hclust.project2D <- cbind(project2D, cluster=as.factor(groups), country=df$Country)
head(hclust.project2D)
princ <- prcomp(youtube_clustering)
nComp <- 2
project2D <- as.data.frame(predict(princ, newdata=youtube_clustering)[,1:nComp])
hclust.project2D <- cbind(project2D, cluster=as.factor(groups), country=names$Country)
head(hclust.project2D)
library('grDevices')
find_convex_hull <- function(proj2Ddf, groups) {
do.call(rbind,
lapply(unique(groups),
FUN = function(c) {
f <- subset(proj2Ddf, cluster==c);
f[chull(f),]
}
)
)
}
hclust.hull <- find_convex_hull(hclust.project2D, groups)
library('grDevices')
find_convex_hull <- function(proj2Ddf, groups) {
do.call(rbind,
lapply(unique(groups),
FUN = function(c) {
f <- subset(proj2Ddf, cluster==c);
f[chull(f),]
}
)
)
}
hclust.hull <- find_convex_hull(hclust.project2D, groups)
ggplot(hclust.project2D, aes(x=PC1, y=PC2)) +
geom_point(aes(shape=cluster, color=cluster)) +
geom_text(aes(label=country, color=cluster), hjust=0, vjust=1, size=3) +
geom_polygon(data=hclust.hull, aes(group=cluster, fill=as.factor(cluster)),
alpha=0.4, linetype=0) + theme(text=element_text(size=20))
ggplot(hclust.project2D, aes(x=PC1, y=PC2)) +
geom_point(aes(shape=cluster, color=cluster)) +
geom_text(aes(label=country, color=cluster), hjust=0, vjust=1, size=3) +
geom_polygon(data=hclust.hull, aes(group=cluster, fill=as.factor(cluster)),
alpha=0.4, linetype=0) + theme(text=element_text(size=20))
ggplot(hclust.project2D, aes(x=PC1, y=PC2)) +
geom_point(aes(shape=cluster, color=cluster)) +
geom_text(aes(label=country, color=cluster), hjust=0, vjust=1, size=3) +
geom_polygon(data=hclust.hull, aes(group=cluster, fill=as.factor(cluster)),
alpha=0.4, linetype=0) + theme(text=element_text(size=20))
ggplot(hclust.project2D, aes(x=PC1, y=PC2)) +
geom_point(aes(shape=cluster, color=cluster)) +
geom_text(aes(label=country, color=cluster), hjust=0, vjust=1, size=3) +
geom_polygon(data=hclust.hull, aes(group=cluster, fill=as.factor(cluster)),
alpha=0.4, linetype=0) + theme(text=element_text(size=5))
ggplot(hclust.project2D, aes(x=PC1, y=PC2)) +
geom_point(aes(shape=cluster, color=cluster)) +
geom_text(aes(label=country, color=cluster), hjust=0, vjust=1, size=3) +
geom_polygon(data=hclust.hull, aes(group=cluster, fill=as.factor(cluster)),
alpha=0.4, linetype=0) + theme(text=element_text(size=8))
install.packages("fpc")
library(ggplot2)
library(gridExtra)
library(dplyr)
library(knitr)
library(tidyverse)
library(ggrepel)
library(vtreat)
library(corrplot)
library(tidyr)
library(psych)
library(GGally)
library(stringr)
library(reshape2)
library(caret)
library(ROCR)
library(MASS)
library(FactoMineR)
library(tidymodels)
library(glmnet)
library(parsnip)
library(yardstick)
library(rpart)
library(rpart.plot)
library(fpc)
kbest.p <- 3
cboot.hclust <- clusterboot(youtube_clustering, clustermethod=hclustCBI,
method="ward.D2", k=kbest.p)
kbest.p <- 3
cboot.hclust <- clusterboot(youtube_clustering, clustermethod=hclustCBI,
method="ward.D2", k=kbest.p)
summary(cboot.hclust$result)
groups.cboot <- cboot.hclust$result$partition
print_clusters(names, groups.cboot, "Country")
groups.cboot <- cboot.hclust$result$partition
values <- 1 - cboot.hclust$bootbrd/100
# Function to return the squared Euclidean distance of two given points x and y
sqr_euDist <- function(x, y) {
sum((x - y)ˆ2)
}
# Function to calculate WSS of a cluster, represented as a n-by-d matrix
# (where n and d are the numbers of rows and columns of the matrix)
# which contains only points of the cluster.
wss <- function(clustermat) {
c0 <- colMeans(clustermat)
sum(apply( clustermat, 1, FUN=function(row) {sqr_euDist(row, c0)} ))
}
# Function to calculate the total WSS. Argument `scaled_df`: data frame
# with normalised numerical columns. Argument `labels`: vector containing
# the cluster ID (starting at 1) for each row of the data frame.
wss_total <- function(scaled_df, labels) {
wss.sum <- 0
k <- length(unique(labels))
for (i in 1:k)
wss.sum <- wss.sum + wss(subset(scaled_df, labels == i))
wss.sum
}
# Function to calculate total sum of squared (TSS) distance of data
# points about the (global) mean. This is the same as WSS when the
# number of clusters (k) is 1.
tss <- function(scaled_df) {
wss(scaled_df)
}
# Function to return the CH indices computed using hierarchical
# clustering (function `hclust`) or k-means clustering (`kmeans`)
# for a vector of k values ranging from 1 to kmax.
CH_index <- function(scaled_df, kmax, method="kmeans") {
if (!(method %in% c("kmeans", "hclust")))
stop("method must be one of c('kmeans', 'hclust')")
npts <- nrow(scaled_df)
wss.value <- numeric(kmax) # create a vector of numeric type
# wss.value[1] stores the WSS value for k=1 (when all the
# data points form 1 large cluster).
wss.value[1] <- wss(scaled_df)
if (method == "kmeans") {
# kmeans
for (k in 2:kmax) {
clustering <- kmeans(scaled_df, k, nstart=10, iter.max=100)
wss.value[k] <- clustering$tot.withinss
}
} else {
# hclust
d <- dist(scaled_df, method="euclidean")
pfit <- hclust(d, method="ward.D2")
for (k in 2:kmax) {
labels <- cutree(pfit, k=k)
wss.value[k] <- wss_total(scaled_df, labels)
}
}
bss.value <- tss(scaled_df) - wss.value # this is a vector
B <- bss.value / (0:(kmax-1)) # also a vector
W <- wss.value / (npts - 1:kmax) # also a vector
data.frame(k = 1:kmax, CH_index = B/W, WSS = wss.value)
}
# Function to return the squared Euclidean distance of two given points x and y
sqr_euDist <- function(x, y) {
sum((x - y)^2)
}
# Function to calculate WSS of a cluster, represented as a n-by-d matrix
# (where n and d are the numbers of rows and columns of the matrix)
# which contains only points of the cluster.
wss <- function(clustermat) {
c0 <- colMeans(clustermat)
sum(apply( clustermat, 1, FUN=function(row) {sqr_euDist(row, c0)} ))
}
# Function to calculate the total WSS. Argument `scaled_df`: data frame
# with normalised numerical columns. Argument `labels`: vector containing
# the cluster ID (starting at 1) for each row of the data frame.
wss_total <- function(scaled_df, labels) {
wss.sum <- 0
k <- length(unique(labels))
for (i in 1:k)
wss.sum <- wss.sum + wss(subset(scaled_df, labels == i))
wss.sum
}
# Function to calculate total sum of squared (TSS) distance of data
# points about the (global) mean. This is the same as WSS when the
# number of clusters (k) is 1.
tss <- function(scaled_df) {
wss(scaled_df)
}
# Function to return the CH indices computed using hierarchical
# clustering (function `hclust`) or k-means clustering (`kmeans`)
# for a vector of k values ranging from 1 to kmax.
CH_index <- function(scaled_df, kmax, method="kmeans") {
if (!(method %in% c("kmeans", "hclust")))
stop("method must be one of c('kmeans', 'hclust')")
npts <- nrow(scaled_df)
wss.value <- numeric(kmax) # create a vector of numeric type
# wss.value[1] stores the WSS value for k=1 (when all the
# data points form 1 large cluster).
wss.value[1] <- wss(scaled_df)
if (method == "kmeans") {
# kmeans
for (k in 2:kmax) {
clustering <- kmeans(scaled_df, k, nstart=10, iter.max=100)
wss.value[k] <- clustering$tot.withinss
}
} else {
# hclust
d <- dist(scaled_df, method="euclidean")
pfit <- hclust(d, method="ward.D2")
for (k in 2:kmax) {
labels <- cutree(pfit, k=k)
wss.value[k] <- wss_total(scaled_df, labels)
}
}
bss.value <- tss(scaled_df) - wss.value # this is a vector
B <- bss.value / (0:(kmax-1)) # also a vector
W <- wss.value / (npts - 1:kmax) # also a vector
data.frame(k = 1:kmax, CH_index = B/W, WSS = wss.value)
}
# calculate the CH criterion
crit.df <- CH_index(scaled_df, 10, method="hclust")
fig1 <- ggplot(crit.df, aes(x=k, y=CH_index)) +
geom_point() + geom_line(colour="red") +
scale_x_continuous(breaks=1:10, labels=1:10) +
labs(y="CH index") + theme(text=element_text(size=20))
fig2 <- ggplot(crit.df, aes(x=k, y=WSS), color="blue") +
geom_point() + geom_line(colour="blue") +
scale_x_continuous(breaks=1:10, labels=1:10) +
theme(text=element_text(size=20))
# calculate the CH criterion
crit.df <- CH_index(youtube_clustering, 10, method="hclust")
fig1 <- ggplot(crit.df, aes(x=k, y=CH_index)) +
geom_point() + geom_line(colour="red") +
scale_x_continuous(breaks=1:10, labels=1:10) +
labs(y="CH index") + theme(text=element_text(size=20))
fig2 <- ggplot(crit.df, aes(x=k, y=WSS), color="blue") +
geom_point() + geom_line(colour="blue") +
scale_x_continuous(breaks=1:10, labels=1:10) +
theme(text=element_text(size=20))
# calculate the CH criterion
crit.df <- CH_index(youtube_clustering, 10, method="hclust")
fig1 <- ggplot(crit.df, aes(x=k, y=CH_index)) +
geom_point() + geom_line(colour="red") +
scale_x_continuous(breaks=1:10, labels=1:10) +
labs(y="CH index") + theme(text=element_text(size=20))
fig2 <- ggplot(crit.df, aes(x=k, y=WSS), color="blue") +
geom_point() + geom_line(colour="blue") +
scale_x_continuous(breaks=1:10, labels=1:10) +
theme(text=element_text(size=20))
grid.arrange(fig1, fig2, nrow=1)
# calculate the CH criterion
crit.df <- CH_index(youtube_clustering, 10, method="hclust")
fig1 <- ggplot(crit.df, aes(x=k, y=CH_index)) +
geom_point() + geom_line(colour="red") +
scale_x_continuous(breaks=1:10, labels=1:10) +
labs(y="CH index") + theme(text=element_text(size=20))
fig2 <- ggplot(crit.df, aes(x=k, y=WSS), color="blue") +
geom_point() + geom_line(colour="blue") +
scale_x_continuous(breaks=1:10, labels=1:10) +
theme(text=element_text(size=20))
grid.arrange(fig1, fig2, nrow=1)
# calculate the CH criterion
crit.df <- CH_index(youtube_clustering, 10, method="hclust")
fig1 <- ggplot(crit.df, aes(x=k, y=CH_index)) +
geom_point() + geom_line(colour="red") +
scale_x_continuous(breaks=1:10, labels=1:10) +
labs(y="CH index") + theme(text=element_text(size=20))
fig2 <- ggplot(crit.df, aes(x=k, y=WSS), color="blue") +
geom_point() + geom_line(colour="blue") +
scale_x_continuous(breaks=1:10, labels=1:10) +
theme(text=element_text(size=8))
grid.arrange(fig1, fig2, nrow=1)
# calculate the CH criterion
crit.df <- CH_index(youtube_clustering, 10, method="hclust")
fig1 <- ggplot(crit.df, aes(x=k, y=CH_index)) +
geom_point() + geom_line(colour="red") +
scale_x_continuous(breaks=1:10, labels=1:10) +
labs(y="CH index") + theme(text=element_text(size=8))
fig2 <- ggplot(crit.df, aes(x=k, y=WSS), color="blue") +
geom_point() + geom_line(colour="blue") +
scale_x_continuous(breaks=1:10, labels=1:10) +
theme(text=element_text(size=8))
grid.arrange(fig1, fig2, nrow=1)
