xlim(boxplot.stats(youtube_numeric[[x_var]])$stats[1], boxplot.stats(youtube_numeric[[x_var]])$stats[4])
p <- p + annotation_custom(ggplotGrob(second_plot), xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf)
}
else {
second_plot <- ggplot(youtube_numeric, aes_string(x = x_var))
second_plot <- second_plot +
switch(second_plot_type,
"Boxplot" = geom_boxplot(color = "red"),
"Density Plot" = geom_density(fill = "red", alpha = 0.2),
"Histogram" = geom_histogram(aes_string(x = x_var), binwidth = binwidth, fill = "red", alpha = 0.2)) +
theme_void()  # Remove axis labels and ticks from the second plot
p <- p + annotation_custom(ggplotGrob(second_plot), xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf)
}
print(p)
})
}
# Run the Shiny app
shinyApp(ui, server)
categorical_columns <- sapply(youtube, function(col) !is.numeric(col))
youtube_categorical <- youtube[, categorical_columns]
ui <- fluidPage(
titlePanel("YouTube Categorical Data Analysis"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "variable", label = "Select a variable:",
choices = colnames(youtube_categorical)),
sliderInput(inputId = "num_levels", label = "Number of Levels to Show:",
min = 10, max = 995, value = 10, step = 1)
),
mainPanel(
plotOutput(outputId = "barplot")
)
)
)
# Define server
server <- function(input, output) {
output$barplot <- renderPlot({
selected_variable <- input$variable
num_levels_to_show <- input$num_levels  # Get the selected number of levels
# Count the levels of the selected categorical variable
counts <- youtube_categorical %>%
count(.data[[selected_variable]])
# Sort levels by counts in descending order
sorted_levels <- counts %>%
arrange(desc(n)) %>%
pull(.data[[selected_variable]])
# Reorder the factor levels based on sorted levels
youtube_categorical[[selected_variable]] <- factor(
youtube_categorical[[selected_variable]],
levels = sorted_levels
)
# Subset data based on selected number of levels and create plot
subset_data <- youtube_categorical %>%
filter(.data[[selected_variable]] %in% sorted_levels[1:num_levels_to_show])
ggplot(data = subset_data, aes(x = reorder(.data[[selected_variable]], desc(.data[[selected_variable]])))) +
geom_bar() +
coord_flip() +
labs(title = paste("Bar Chart of", selected_variable),
x = selected_variable,
y = "Count")
})
}
# Run the app
shinyApp(ui = ui, server = server)
View(youtube)
View(youtube)
subset_data <- youtube_categorical %>%
filter(.data[["Country"]] %in% sorted_levels[1:10])
selected_variable <- "Country"
num_levels_to_show <- 10  # Get the selected number of levels
# Count the levels of the selected categorical variable
counts <- youtube_categorical %>%
count(.data[[selected_variable]])
# Sort levels by counts in descending order
sorted_levels <- counts %>%
arrange(desc(n)) %>%
pull(.data[[selected_variable]])
# Reorder the factor levels based on sorted levels
youtube_categorical[[selected_variable]] <- factor(
youtube_categorical[[selected_variable]],
levels = sorted_levels
)
# Subset data based on selected number of levels and create plot
subset_data <- youtube_categorical %>%
filter(.data[[selected_variable]] %in% sorted_levels[1:num_levels_to_show])
selected_variable <- "Country"
num_levels_to_show <- 10  # Get the selected number of levels
# Count the levels of the selected categorical variable
counts <- youtube_categorical %>%
count(.data[[selected_variable]])
# Sort levels by counts in descending order
sorted_levels <- counts %>%
arrange(desc(n)) %>%
pull(.data[[selected_variable]])
# Reorder the factor levels based on sorted levels
youtube_categorical[[selected_variable]] <- factor(
youtube_categorical[[selected_variable]],
levels = sorted_levels
)
# Subset data based on selected number of levels and create plot
subset_data <- youtube_categorical %>%
filter(.data[[selected_variable]] %in% sorted_levels[1:num_levels_to_show])
selected_variable <- "Country"
num_levels_to_show <- 10  # Get the selected number of levels
# Count the levels of the selected categorical variable
counts <- youtube_categorical %>%
count(.data[[selected_variable]])
# Sort levels by counts in descending order
sorted_levels <- counts %>%
arrange(desc(n)) %>%
pull(.data[[selected_variable]])
# Reorder the factor levels based on sorted levels
youtube_categorical[[selected_variable]] <- factor(
youtube_categorical[[selected_variable]],
levels = sorted_levels
)
# Subset data based on selected number of levels and create plot
subset_data <- youtube_categorical %>%
filter(.data[[selected_variable]] %in% sorted_levels[1:num_levels_to_show])
selected_variable <- "Country"
num_levels_to_show <- 10  # Get the selected number of levels
# Count the levels of the selected categorical variable
counts <- youtube_categorical %>%
count(.data[[selected_variable]])
# Sort levels by counts in descending order
sorted_levels <- counts %>%
arrange(desc(n)) %>%
pull(.data[[selected_variable]])
# Reorder the factor levels based on sorted levels
youtube_categorical[[selected_variable]] <- factor(
youtube_categorical[[selected_variable]],
levels = sorted_levels
)
# Subset data based on selected number of levels and create plot
subset_data <- youtube_categorical %>%
filter(.data[[selected_variable]] %in% sorted_levels[1:num_levels_to_show])
selected_variable <- "Country"
num_levels_to_show <- 10  # Get the selected number of levels
# Count the levels of the selected categorical variable
counts <- youtube_categorical %>%
count(.data[[selected_variable]])
# Sort levels by counts in descending order
sorted_levels <- counts %>%
arrange(desc(n)) %>%
pull(.data[[selected_variable]])
# Reorder the factor levels based on sorted levels
youtube_categorical[[selected_variable]] <- factor(
youtube_categorical[[selected_variable]],
levels = sorted_levels
)
# Subset data based on selected number of levels and create plot
subset_data <- youtube_categorical %>%
filter(.data[[selected_variable]] %in% sorted_levels[1:num_levels_to_show])
ggplot(data = subset_data, aes(x = reorder(.data[[selected_variable]], desc(.data[[selected_variable]])))) +
geom_bar() +
coord_flip() +
labs(title = paste("Bar Chart of", selected_variable),
x = selected_variable,
y = "Count")
category_counts <- table(youtube$category)
pie_data <- data.frame(
category_counts
)
pie_data <- pie_data %>% arrange(desc(Freq))
top_10 <- head(pie_data, 10)
rest <- tail(pie_data, -10)
others <- data.frame(Var1 = "others", Freq = sum(rest$Freq))
final_pie_data <- rbind(top_10, others)
total_sum <- sum(pie_data$Freq)
final_pie_data <- final_pie_data %>%
mutate(Percentage = round((Freq / total_sum) * 100, 2))
# Get the positions
pie_pos <- final_pie_data %>%
mutate(csum = rev(cumsum(rev(Freq))),
pos = Freq/2 + lead(csum, 1),
pos = if_else(is.na(pos), Freq/2, pos))
ggplot(final_pie_data, aes(x = "" , y = Freq, fill = fct_inorder(Var1))) +
geom_col(width = 1, color = 1) +
coord_polar(theta = "y") +
geom_label_repel(data = pie_pos,
aes(y = pos, label = paste0(Percentage, "%")),
size = 4.5, nudge_x = 1, show.legend = FALSE) +
guides(fill = guide_legend(title = "Group")) +
theme_void()
# Chunk 1
library(ggplot2)
library(gridExtra)
library(dplyr)
library(ggthemes)
library(numform)
library(treemapify)
library(timeDate)
library(lubridate)
library(dplyr)
library(reshape2)
library(ca)
library(shiny)
library(knitr)
library(shinyWidgets)
library(hexbin)
library(tidyverse)
library(ggrepel)
# Chunk 2
cits4009_theme <- theme_few() + # Theme based on S. Few's "Practical Rules for Using Color in Charts"
theme(plot.title = element_text(color = "darkred")) +
theme(strip.text.x = element_text(size = 14, colour = "#202020")) +
theme(plot.margin=margin(10,30,10,30))
# Chunk 3
path <- './data/youtube_UTF_8.csv'
youtube <- read.csv(path)
# Chunk 4
str(youtube)
# Chunk 5
summary(youtube)
# Chunk 6
head(youtube)
# Chunk 7
youtube$new_date_column <- paste(youtube$created_year, match(youtube$created_month, month.abb), sprintf("%02f", youtube$created_date), sep = "-")
# Chunk 8
youtube <- youtube %>%
mutate(video.views = na_if(video.views, 0),
uploads = na_if(uploads, 0))
# Chunk 9
youtube <- youtube %>%
mutate(created_year = ifelse(created_year < 2005, NA, created_year))
# Chunk 10
youtube <- youtube %>%
mutate_all(~ ifelse(. %in% c("nan", "NaN"), NA_character_, .))
# Chunk 11
count_nan_values <- function(dataframe) {
sapply(dataframe, function(col) sum(is.na(col)))
}
nacounts <- count_nan_values(youtube)
hasNA = which(nacounts > 0)
nacounts[hasNA]
# Chunk 12
summary(youtube[is.na(youtube$Population), c("Unemployment.rate", "Urban_population", "Latitude", "Longitude")])
# Chunk 13
result <- subset(youtube, is.na(uploads))
nacounts <- count_nan_values(result)
hasNA = which(nacounts > 0)
nacounts[hasNA]
# Chunk 14
youtube <- youtube[!(is.na(youtube$video.views) | is.na(youtube$uploads)), ]
# Chunk 15
category_counts <- table(youtube$category)
pie_data <- data.frame(
category_counts
)
pie_data <- pie_data %>% arrange(desc(Freq))
top_10 <- head(pie_data, 10)
rest <- tail(pie_data, -10)
others <- data.frame(Var1 = "others", Freq = sum(rest$Freq))
final_pie_data <- rbind(top_10, others)
total_sum <- sum(pie_data$Freq)
final_pie_data <- final_pie_data %>%
mutate(Percentage = round((Freq / total_sum) * 100, 2))
# Get the positions
pie_pos <- final_pie_data %>%
mutate(csum = rev(cumsum(rev(Freq))),
pos = Freq/2 + lead(csum, 1),
pos = if_else(is.na(pos), Freq/2, pos))
ggplot(final_pie_data, aes(x = "" , y = Freq, fill = fct_inorder(Var1))) +
geom_col(width = 1, color = 1) +
coord_polar(theta = "y") +
geom_label_repel(data = pie_pos,
aes(y = pos, label = paste0(Percentage, "%")),
size = 4.5, nudge_x = 1, show.legend = FALSE) +
guides(fill = guide_legend(title = "Group")) +
theme_void()
# Chunk 16
selected_variable <- "Country"
num_levels_to_show <- 10  # Get the selected number of levels
# Count the levels of the selected categorical variable
counts <- youtube_categorical %>%
count(.data[[selected_variable]])
selected_variable <- "Country"
num_levels_to_show <- 10  # Get the selected number of levels
# Count the levels of the selected categorical variable
counts <- youtube %>%
count(.data[[selected_variable]])
# Sort levels by counts in descending order
sorted_levels <- counts %>%
arrange(desc(n)) %>%
pull(.data[[selected_variable]])
# Reorder the factor levels based on sorted levels
youtube_categorical[[selected_variable]] <- factor(
youtube_categorical[[selected_variable]],
levels = sorted_levels
)
selected_variable <- "Country"
num_levels_to_show <- 10  # Get the selected number of levels
# Count the levels of the selected categorical variable
counts <- youtube %>%
count(.data[[selected_variable]])
# Sort levels by counts in descending order
sorted_levels <- counts %>%
arrange(desc(n)) %>%
pull(.data[[selected_variable]])
# Reorder the factor levels based on sorted levels
youtube[[selected_variable]] <- factor(
youtube[[selected_variable]],
levels = sorted_levels
)
# Subset data based on selected number of levels and create plot
subset_data <- youtube %>%
filter(.data[[selected_variable]] %in% sorted_levels[1:num_levels_to_show])
ggplot(data = subset_data, aes(x = reorder(.data[[selected_variable]], desc(.data[[selected_variable]])))) +
geom_bar() +
coord_flip() +
labs(title = paste("Bar Chart of", selected_variable),
x = selected_variable,
y = "Count")
install.packages(knitr)
install.packages("knitr")
install.packages("knitr")
library(ggplot2)
library(gridExtra)
library(dplyr)
library(ggthemes)
library(numform)
library(treemapify)
library(timeDate)
library(lubridate)
library(dplyr)
library(reshape2)
library(ca)
library(shiny)
library(knitr)
library(shinyWidgets)
library(hexbin)
library(tidyverse)
library(ggrepel)
# Chunk 1
library(ggplot2)
library(gridExtra)
library(dplyr)
library(ggthemes)
library(numform)
library(treemapify)
library(timeDate)
library(lubridate)
library(dplyr)
library(reshape2)
library(ca)
library(shiny)
library(knitr)
library(shinyWidgets)
library(hexbin)
library(tidyverse)
library(ggrepel)
# Chunk 2
cits4009_theme <- theme_few() + # Theme based on S. Few's "Practical Rules for Using Color in Charts"
theme(plot.title = element_text(color = "darkred")) +
theme(strip.text.x = element_text(size = 14, colour = "#202020")) +
theme(plot.margin=margin(10,30,10,30))
# Chunk 3
path <- './data/youtube_UTF_8.csv'
youtube <- read.csv(path)
# Chunk 4
str(youtube)
# Chunk 5
summary(youtube)
# Chunk 6
head(youtube)
# Chunk 7
youtube$new_date_column <- paste(youtube$created_year, match(youtube$created_month, month.abb), sprintf("%02f", youtube$created_date), sep = "-")
# Chunk 8
youtube <- youtube %>%
mutate(video.views = na_if(video.views, 0),
uploads = na_if(uploads, 0))
# Chunk 9
youtube <- youtube %>%
mutate(created_year = ifelse(created_year < 2005, NA, created_year))
# Chunk 10
youtube <- youtube %>%
mutate_all(~ ifelse(. %in% c("nan", "NaN"), NA_character_, .))
# Chunk 11
count_nan_values <- function(dataframe) {
sapply(dataframe, function(col) sum(is.na(col)))
}
nacounts <- count_nan_values(youtube)
hasNA = which(nacounts > 0)
nacounts[hasNA]
# Chunk 12
summary(youtube[is.na(youtube$Population), c("Unemployment.rate", "Urban_population", "Latitude", "Longitude")])
# Chunk 13
result <- subset(youtube, is.na(uploads))
nacounts <- count_nan_values(result)
hasNA = which(nacounts > 0)
nacounts[hasNA]
# Chunk 14
youtube <- youtube[!(is.na(youtube$video.views) | is.na(youtube$uploads)), ]
# Chunk 15
category_counts <- table(youtube$category)
pie_data <- data.frame(
category_counts
)
pie_data <- pie_data %>% arrange(desc(Freq))
top_10 <- head(pie_data, 10)
rest <- tail(pie_data, -10)
others <- data.frame(Var1 = "others", Freq = sum(rest$Freq))
final_pie_data <- rbind(top_10, others)
total_sum <- sum(pie_data$Freq)
final_pie_data <- final_pie_data %>%
mutate(Percentage = round((Freq / total_sum) * 100, 2))
# Get the positions
pie_pos <- final_pie_data %>%
mutate(csum = rev(cumsum(rev(Freq))),
pos = Freq/2 + lead(csum, 1),
pos = if_else(is.na(pos), Freq/2, pos))
ggplot(final_pie_data, aes(x = "" , y = Freq, fill = fct_inorder(Var1))) +
geom_col(width = 1, color = 1) +
coord_polar(theta = "y") +
geom_label_repel(data = pie_pos,
aes(y = pos, label = paste0(Percentage, "%")),
size = 4.5, nudge_x = 1, show.legend = FALSE) +
guides(fill = guide_legend(title = "Group")) +
theme_void()
# Chunk 16
selected_variable <- "Country"
num_levels_to_show <- 10  # Get the selected number of levels
# Count the levels of the selected categorical variable
counts <- youtube %>%
count(.data[[selected_variable]])
# Sort levels by counts in descending order
sorted_levels <- counts %>%
arrange(desc(n)) %>%
pull(.data[[selected_variable]])
# Reorder the factor levels based on sorted levels
youtube[[selected_variable]] <- factor(
youtube[[selected_variable]],
levels = sorted_levels
)
# Subset data based on selected number of levels and create plot
subset_data <- youtube %>%
filter(.data[[selected_variable]] %in% sorted_levels[1:num_levels_to_show])
ggplot(data = subset_data, aes(x = reorder(.data[[selected_variable]], desc(.data[[selected_variable]])))) +
geom_bar() +
coord_flip() +
labs(title = paste("Bar Chart of", selected_variable),
x = selected_variable,
y = "Count")
# Chunk 17
numeric_columns <- sapply(youtube, is.numeric)
youtube_numeric <- youtube[, numeric_columns]
# UI part of the Shiny app
ui <- fluidPage(
titlePanel("YouTube Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("x_var", "Select X Variable:", choices = colnames(youtube_numeric)),
selectInput("plot_type", "Select Plot Type:",
choices = c("Boxplot", "Density Plot", "Histogram")),
conditionalPanel(
condition = "input.plot_type == 'Histogram'",
sliderInput("binwidth", "Binwidth:", min = 1, max = 100, value = 5)
),
checkboxInput("limit_range", "Limit to Q1-Q3 Range", value = FALSE),
selectInput("second_plot_type", "Superimpose Second Plot:",
choices = c("None", "Boxplot", "Density Plot", "Histogram"))
),
mainPanel(
plotOutput("plot")
)
)
)
# Server part of the Shiny app
server <- function(input, output) {
output$plot <- renderPlot({
x_var <- input$x_var
plot_type <- input$plot_type
limit_range <- input$limit_range
binwidth <- input$binwidth
second_plot_type <- input$second_plot_type
p <- ggplot(youtube_numeric, aes_string(x = x_var))
if (limit_range) {
p <- p + xlim(boxplot.stats(youtube_numeric[[x_var]])$stats[1], boxplot.stats(youtube_numeric[[x_var]])$stats[4]) +
labs(title = paste(plot_type, " (Q1-Q3 Range)"))
} else {
p <- p + labs(title = plot_type)
}
p <- p + switch(plot_type,
"Boxplot" = geom_boxplot(),
"Density Plot" = geom_density(),
"Histogram" = geom_histogram(binwidth = binwidth, aes_string(x = x_var), colour="black", fill="white"))
if (second_plot_type != "None" & limit_range) {
second_plot <- ggplot(youtube_numeric, aes_string(x = x_var))
second_plot <- second_plot +
switch(second_plot_type,
"Boxplot" = geom_boxplot(color = "red"),
"Density Plot" = geom_density(fill = "red", alpha = 0.2),
"Histogram" = geom_histogram(aes_string(x = x_var), binwidth = binwidth, fill = "red", alpha = 0.2)) +
theme_void() +  # Remove axis labels and ticks from the second plot
xlim(boxplot.stats(youtube_numeric[[x_var]])$stats[1], boxplot.stats(youtube_numeric[[x_var]])$stats[4])
p <- p + annotation_custom(ggplotGrob(second_plot), xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf)
}
else {
second_plot <- ggplot(youtube_numeric, aes_string(x = x_var))
second_plot <- second_plot +
switch(second_plot_type,
"Boxplot" = geom_boxplot(color = "red"),
"Density Plot" = geom_density(fill = "red", alpha = 0.2),
"Histogram" = geom_histogram(aes_string(x = x_var), binwidth = binwidth, fill = "red", alpha = 0.2)) +
theme_void()  # Remove axis labels and ticks from the second plot
p <- p + annotation_custom(ggplotGrob(second_plot), xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf)
}
print(p)
})
}
# Run the Shiny app
shinyApp(ui, server)
