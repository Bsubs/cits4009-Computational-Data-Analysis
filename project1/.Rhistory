# Update the UI with the slider input
ui <- fluidPage(
titlePanel("YouTube Numerical Multivariable Data Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("plot_type", "Select plot type:",
choices = c("Pairwise", "Scatter", "geom_smooth", "Overlay", "geom_bin2d", "geom_count")),
conditionalPanel(
condition = "input.plot_type == 'Pairwise'",
pickerInput(
inputId = "selected_attributes",
label = "Select attributes:",
choices = colnames(youtube_numeric),
multiple = TRUE,
options = list(`actions-box` = TRUE)
)
),
conditionalPanel(
condition = "input.plot_type == 'Scatter'|| input.plot_type == 'geom_smooth' || input.plot_type == 'Overlay' ||
input.plot_type == 'geom_bin2d' || input.plot_type == 'geom_count'",
selectInput("x_attr", "Select x-axis attribute:", colnames(youtube_numeric)),
selectInput("y_attr", "Select y-axis attribute:", colnames(youtube_numeric)),
conditionalPanel(
condition = "input.plot_type == 'Scatter'",
selectInput(
inputId = "aes_attr_1",
label = "Select Aesthetic Type:",
choices = c("None", "Group", "Color", "Size", "Alpha", "Shape"),
),
conditionalPanel(
condition = "input.aes_attr_1 != 'None'",
selectInput("factor_attr_1", "Select factor attribute:", colnames(youtube_categorical))
)
),
conditionalPanel(
condition = "input.plot_type == 'geom_smooth'",
selectInput(
inputId = "aes_attr_2",
label = "Select Aesthetic Type:",
choices = c("None", "Color", "Size", "Alpha", "Shape"),
),
conditionalPanel(
condition = "input.aes_attr_2 != 'None'",
selectInput("factor_attr_2", "Select factor attribute:", colnames(youtube_categorical))
)
),
conditionalPanel(
condition = "input.plot_type == 'geom_count'",
sliderInput(inputId = "alpha_levels", label = "Alpha:",
min = 0.05, max = 1, value = 0.25, step = 0.05)
)
)
),
mainPanel(
plotOutput("plot")
)
)
)
# Define server
server <- function(input, output) {
output$plot <- renderPlot({
selected_plot <- input$plot_type
if(selected_plot == "Pairwise") {
selected_attrs <- input$selected_attributes
if (length(selected_attrs) < 2) {
return(NULL)
}
pairs(youtube_numeric[, selected_attrs])
} else {
x_attr <- input$x_attr
y_attr <- input$y_attr
if(selected_plot == "Scatter") {
if(input$aes_attr_1 == "None"){
ggplot(youtube_numeric, aes_string(x = x_attr, y = y_attr)) +
geom_point()
}
else {
aes_attr <- input$aes_attr_1
factor_attr <- input$factor_attr_1
print(youtube$factor_attr)
ggplot(youtube_numeric, mapping = aes_string(x = x_attr, y = y_attr,
color = factor(youtube[[factor_attr]]) )) + geom_point()
}
} else if(selected_plot == "geom_smooth") {
ggplot(youtube_numeric, aes_string(x = x_attr, y = y_attr)) +
geom_smooth()
} else if(selected_plot == "Overlay") {
ggplot(youtube_numeric, aes_string(x = x_attr, y = y_attr)) +
geom_point()+geom_smooth()
} else if(selected_plot == "geom_bin2d") {
ggplot(youtube_numeric, aes_string(x = x_attr, y = y_attr)) +
geom_hex()
} else if(selected_plot == "geom_count") {
alpha_attr <- input$alpha_levels
ggplot(youtube_numeric) +
geom_count(mapping = aes_string(x = x_attr, y = y_attr, alpha = alpha_attr ))
}
}
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Update the UI with the slider input
ui <- fluidPage(
titlePanel("YouTube Numerical Multivariable Data Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("plot_type", "Select plot type:",
choices = c("Pairwise", "Scatter", "geom_smooth", "Overlay", "geom_bin2d", "geom_count")),
conditionalPanel(
condition = "input.plot_type == 'Pairwise'",
pickerInput(
inputId = "selected_attributes",
label = "Select attributes:",
choices = colnames(youtube_numeric),
multiple = TRUE,
options = list(`actions-box` = TRUE)
)
),
conditionalPanel(
condition = "input.plot_type == 'Scatter'|| input.plot_type == 'geom_smooth' || input.plot_type == 'Overlay' ||
input.plot_type == 'geom_bin2d' || input.plot_type == 'geom_count'",
selectInput("x_attr", "Select x-axis attribute:", colnames(youtube_numeric)),
selectInput("y_attr", "Select y-axis attribute:", colnames(youtube_numeric)),
conditionalPanel(
condition = "input.plot_type == 'Scatter'",
selectInput(
inputId = "aes_attr_1",
label = "Select Aesthetic Type:",
choices = c("None", "Group", "Color", "Size", "Alpha", "Shape"),
),
conditionalPanel(
condition = "input.aes_attr_1 != 'None'",
selectInput("factor_attr_1", "Select factor attribute:", colnames(youtube_categorical))
)
),
conditionalPanel(
condition = "input.plot_type == 'geom_smooth'",
selectInput(
inputId = "aes_attr_2",
label = "Select Aesthetic Type:",
choices = c("None", "Color", "Size", "Alpha", "Shape"),
),
conditionalPanel(
condition = "input.aes_attr_2 != 'None'",
selectInput("factor_attr_2", "Select factor attribute:", colnames(youtube_categorical))
)
),
conditionalPanel(
condition = "input.plot_type == 'geom_count'",
sliderInput(inputId = "alpha_levels", label = "Alpha:",
min = 0.05, max = 1, value = 0.25, step = 0.05)
)
)
),
mainPanel(
plotOutput("plot")
)
)
)
# Define server
server <- function(input, output) {
output$plot <- renderPlot({
selected_plot <- input$plot_type
if(selected_plot == "Pairwise") {
selected_attrs <- input$selected_attributes
if (length(selected_attrs) < 2) {
return(NULL)
}
pairs(youtube_numeric[, selected_attrs])
} else {
x_attr <- input$x_attr
y_attr <- input$y_attr
if(selected_plot == "Scatter") {
if(input$aes_attr_1 == "None"){
ggplot(youtube_numeric, aes_string(x = x_attr, y = y_attr)) +
geom_point()
}
else {
aes_attr <- input$aes_attr_1
factor_attr <- input$factor_attr_1
print(youtube$factor_attr)
ggplot(youtube_numeric, mapping = aes_string(x = x_attr, y = y_attr,
color = factor(youtube[[factor_attr]]) )) + geom_point()
}
} else if(selected_plot == "geom_smooth") {
ggplot(youtube_numeric, aes_string(x = x_attr, y = y_attr)) +
geom_smooth()
} else if(selected_plot == "Overlay") {
ggplot(youtube_numeric, aes_string(x = x_attr, y = y_attr)) +
geom_point()+geom_smooth()
} else if(selected_plot == "geom_bin2d") {
ggplot(youtube_numeric, aes_string(x = x_attr, y = y_attr)) +
geom_hex()
} else if(selected_plot == "geom_count") {
alpha_attr <- input$alpha_levels
ggplot(youtube_numeric) +
geom_count(mapping = aes_string(x = x_attr, y = y_attr, alpha = alpha_attr ))
}
}
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Update the UI with the slider input
ui <- fluidPage(
titlePanel("YouTube Numerical Multivariable Data Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("plot_type", "Select plot type:",
choices = c("Pairwise", "Scatter", "geom_smooth", "Overlay", "geom_bin2d", "geom_count")),
conditionalPanel(
condition = "input.plot_type == 'Pairwise'",
pickerInput(
inputId = "selected_attributes",
label = "Select attributes:",
choices = colnames(youtube_numeric),
multiple = TRUE,
options = list(`actions-box` = TRUE)
)
),
conditionalPanel(
condition = "input.plot_type == 'Scatter'|| input.plot_type == 'geom_smooth' || input.plot_type == 'Overlay' ||
input.plot_type == 'geom_bin2d' || input.plot_type == 'geom_count'",
selectInput("x_attr", "Select x-axis attribute:", colnames(youtube_numeric)),
selectInput("y_attr", "Select y-axis attribute:", colnames(youtube_numeric)),
conditionalPanel(
condition = "input.plot_type == 'Scatter'",
selectInput(
inputId = "aes_attr_1",
label = "Select Aesthetic Type:",
choices = c("None", "Group", "Color", "Size", "Alpha", "Shape"),
),
conditionalPanel(
condition = "input.aes_attr_1 != 'None'",
selectInput("factor_attr_1", "Select factor attribute:", colnames(youtube_categorical))
)
),
conditionalPanel(
condition = "input.plot_type == 'geom_smooth'",
selectInput(
inputId = "aes_attr_2",
label = "Select Aesthetic Type:",
choices = c("None", "Color", "Size", "Alpha", "Shape"),
),
conditionalPanel(
condition = "input.aes_attr_2 != 'None'",
selectInput("factor_attr_2", "Select factor attribute:", colnames(youtube_categorical))
)
),
conditionalPanel(
condition = "input.plot_type == 'geom_count'",
sliderInput(inputId = "alpha_levels", label = "Alpha:",
min = 0.05, max = 1, value = 0.25, step = 0.05)
)
)
),
mainPanel(
plotOutput("plot")
)
)
)
# Define server
server <- function(input, output) {
output$plot <- renderPlot({
selected_plot <- input$plot_type
if(selected_plot == "Pairwise") {
selected_attrs <- input$selected_attributes
if (length(selected_attrs) < 2) {
return(NULL)
}
pairs(youtube_numeric[, selected_attrs])
} else {
x_attr <- input$x_attr
y_attr <- input$y_attr
if(selected_plot == "Scatter") {
if(input$aes_attr_1 == "None"){
ggplot(youtube_numeric, aes_string(x = x_attr, y = y_attr)) +
geom_point()
}
else {
aes_attr <- input$aes_attr_1
factor_attr <- input$factor_attr_1
print(youtube$factor_attr)
ggplot(youtube_numeric, mapping = aes_string(x = x_attr, y = y_attr,
color = factor(youtube[[factor_attr]]) )) + geom_point()
}
} else if(selected_plot == "geom_smooth") {
ggplot(youtube_numeric, aes_string(x = x_attr, y = y_attr)) +
geom_smooth()
} else if(selected_plot == "Overlay") {
ggplot(youtube_numeric, aes_string(x = x_attr, y = y_attr)) +
geom_point()+geom_smooth()
} else if(selected_plot == "geom_bin2d") {
ggplot(youtube_numeric, aes_string(x = x_attr, y = y_attr)) +
geom_hex()
} else if(selected_plot == "geom_count") {
alpha_attr <- input$alpha_levels
ggplot(youtube_numeric) +
geom_count(mapping = aes_string(x = x_attr, y = y_attr, alpha = alpha_attr ))
}
}
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Update the UI with the slider input
ui <- fluidPage(
titlePanel("YouTube Numerical Multivariable Data Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("plot_type", "Select plot type:",
choices = c("Pairwise", "Scatter", "geom_smooth", "Overlay", "geom_bin2d", "geom_count")),
checkboxInput("limit_range", "Limit to Q1-Q3 Range", value = FALSE),
conditionalPanel(
condition = "input.plot_type == 'Pairwise'",
pickerInput(
inputId = "selected_attributes",
label = "Select attributes:",
choices = colnames(youtube_numeric),
multiple = TRUE,
options = list(`actions-box` = TRUE)
)
),
conditionalPanel(
condition = "input.plot_type == 'Scatter'|| input.plot_type == 'geom_smooth' || input.plot_type == 'Overlay' ||
input.plot_type == 'geom_bin2d' || input.plot_type == 'geom_count'",
selectInput("x_attr", "Select x-axis attribute:", colnames(youtube_numeric)),
selectInput("y_attr", "Select y-axis attribute:", colnames(youtube_numeric)),
conditionalPanel(
condition = "input.plot_type == 'Scatter'",
selectInput(
inputId = "aes_attr_1",
label = "Select Aesthetic Type:",
choices = c("None", "Group", "Color", "Size", "Alpha", "Shape"),
),
conditionalPanel(
condition = "input.aes_attr_1 != 'None'",
selectInput("factor_attr_1", "Select factor attribute:", colnames(youtube_categorical))
)
),
conditionalPanel(
condition = "input.plot_type == 'geom_smooth'",
selectInput(
inputId = "aes_attr_2",
label = "Select Aesthetic Type:",
choices = c("None", "Color", "Size", "Alpha", "Shape"),
),
conditionalPanel(
condition = "input.aes_attr_2 != 'None'",
selectInput("factor_attr_2", "Select factor attribute:", colnames(youtube_categorical))
)
),
conditionalPanel(
condition = "input.plot_type == 'geom_count'",
sliderInput(inputId = "alpha_levels", label = "Alpha:",
min = 0.05, max = 1, value = 0.25, step = 0.05)
)
)
),
mainPanel(
plotOutput("plot")
)
)
)
# Define server
server <- function(input, output) {
output$plot <- renderPlot({
selected_plot <- input$plot_type
if(selected_plot == "Pairwise") {
selected_attrs <- input$selected_attributes
if (length(selected_attrs) < 2) {
return(NULL)
}
pairs(youtube_numeric[, selected_attrs])
} else {
x_attr <- input$x_attr
y_attr <- input$y_attr
if(selected_plot == "Scatter") {
if(input$aes_attr_1 == "None"){
ggplot(youtube_numeric, aes_string(x = x_attr, y = y_attr)) +
geom_point()
}
else {
aes_attr <- input$aes_attr_1
factor_attr <- input$factor_attr_1
print(youtube$factor_attr)
ggplot(youtube_numeric, mapping = aes_string(x = x_attr, y = y_attr,
color = factor(youtube[[factor_attr]]) )) + geom_point()
}
} else if(selected_plot == "geom_smooth") {
ggplot(youtube_numeric, aes_string(x = x_attr, y = y_attr)) +
geom_smooth()
} else if(selected_plot == "Overlay") {
ggplot(youtube_numeric, aes_string(x = x_attr, y = y_attr)) +
geom_point()+geom_smooth()
} else if(selected_plot == "geom_bin2d") {
ggplot(youtube_numeric, aes_string(x = x_attr, y = y_attr)) +
geom_hex()
} else if(selected_plot == "geom_count") {
alpha_attr <- input$alpha_levels
ggplot(youtube_numeric) +
geom_count(mapping = aes_string(x = x_attr, y = y_attr, alpha = alpha_attr ))
}
}
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Update the UI with the slider input
ui <- fluidPage(
titlePanel("YouTube Numerical Multivariable Data Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("plot_type", "Select plot type:",
choices = c("Pairwise", "Scatter", "geom_smooth", "Overlay", "geom_bin2d", "geom_count")),
checkboxInput("limit_range", "Limit to Q1-Q3 Range", value = FALSE),
conditionalPanel(
condition = "input.plot_type == 'Pairwise'",
pickerInput(
inputId = "selected_attributes",
label = "Select attributes:",
choices = colnames(youtube_numeric),
multiple = TRUE,
options = list(`actions-box` = TRUE)
)
),
conditionalPanel(
condition = "input.plot_type == 'Scatter'|| input.plot_type == 'geom_smooth' || input.plot_type == 'Overlay' ||
input.plot_type == 'geom_bin2d' || input.plot_type == 'geom_count'",
selectInput("x_attr", "Select x-axis attribute:", colnames(youtube_numeric)),
selectInput("y_attr", "Select y-axis attribute:", colnames(youtube_numeric)),
conditionalPanel(
condition = "input.plot_type == 'Scatter'",
selectInput(
inputId = "aes_attr_1",
label = "Select Aesthetic Type:",
choices = c("None", "Group", "Color", "Size", "Alpha", "Shape"),
),
conditionalPanel(
condition = "input.aes_attr_1 != 'None'",
selectInput("factor_attr_1", "Select factor attribute:", colnames(youtube_categorical))
)
),
conditionalPanel(
condition = "input.plot_type == 'geom_smooth'",
selectInput(
inputId = "aes_attr_2",
label = "Select Aesthetic Type:",
choices = c("None", "Color", "Size", "Alpha", "Shape"),
),
conditionalPanel(
condition = "input.aes_attr_2 != 'None'",
selectInput("factor_attr_2", "Select factor attribute:", colnames(youtube_categorical))
)
),
conditionalPanel(
condition = "input.plot_type == 'geom_count'",
sliderInput(inputId = "alpha_levels", label = "Alpha:",
min = 0.05, max = 1, value = 0.25, step = 0.05)
)
)
),
mainPanel(
plotOutput("plot")
)
)
)
# Define server
server <- function(input, output) {
output$plot <- renderPlot({
selected_plot <- input$plot_type
if(selected_plot == "Pairwise") {
selected_attrs <- input$selected_attributes
if (length(selected_attrs) < 2) {
return(NULL)
}
pairs(youtube_numeric[, selected_attrs])
} else {
x_attr <- input$x_attr
y_attr <- input$y_attr
if(selected_plot == "Scatter") {
if(input$aes_attr_1 == "None"){
ggplot(youtube_numeric, aes_string(x = x_attr, y = y_attr)) +
geom_point()
}
else {
aes_attr <- input$aes_attr_1
factor_attr <- input$factor_attr_1
print(youtube$factor_attr)
ggplot(youtube_numeric, mapping = aes_string(x = x_attr, y = y_attr,
aes_attr = factor(youtube[[factor_attr]]) )) + geom_point()
}
} else if(selected_plot == "geom_smooth") {
ggplot(youtube_numeric, aes_string(x = x_attr, y = y_attr)) +
geom_smooth()
} else if(selected_plot == "Overlay") {
ggplot(youtube_numeric, aes_string(x = x_attr, y = y_attr)) +
geom_point()+geom_smooth()
} else if(selected_plot == "geom_bin2d") {
ggplot(youtube_numeric, aes_string(x = x_attr, y = y_attr)) +
geom_hex()
} else if(selected_plot == "geom_count") {
alpha_attr <- input$alpha_levels
ggplot(youtube_numeric) +
geom_count(mapping = aes_string(x = x_attr, y = y_attr, alpha = alpha_attr ))
}
}
})
}
# Run the app
shinyApp(ui = ui, server = server)
